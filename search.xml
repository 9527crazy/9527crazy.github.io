<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>liunxFolder</title>
      <link href="2021/01/25/liunxFolder/"/>
      <url>2021/01/25/liunxFolder/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux根目录”-“下各个系统文件夹的含义和用途"><a href="#Linux根目录”-“下各个系统文件夹的含义和用途" class="headerlink" title="Linux根目录”/“下各个系统文件夹的含义和用途"></a>Linux根目录”/“下各个系统文件夹的含义和用途</h2><p>1、/boot 该目录默认下存放的是Linux的启动文件和内核。<br>2、/initrd 它的英文含义是boot loader initialized RAM disk,就是由boot loader初始化的内存盘。在linux内核启动前，boot loader会将存储介质(一般是硬盘)中的initrd文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的initrd文件系统。<br>3、/bin 该目录中存放Linux的常用命令。<br>4、/sbin 该目录用来存放系统管理员使用的管理程序。<br>5、/var 该目录存放那些经常被修改的文件，包括各种日志、数据文件。<br>6、/etc 该目录存放系统管理时要用到的各种配置文件和子目录，例如网络配置文件、文件系统、X系统配置文件、设备配置信息、设置用户信息等。<br>7、/dev 该目录包含了Linux系统中使用的所有外部设备，它实际上是访问这些外部设备的端口，访问这些外部设备与访问一个文件或一个目录没有区别。<br>8、/mnt 临时将别的文件系统挂在该目录下。<br>9、/root 如果你是以超级用户的身份登录的，这个就是超级用户的主目录。<br>10、/home 如果建立一个名为“xx”的用户，那么在/home目录下就有一个对应的“/home/xx”路径，用来存放该用户的主目录。<br>11、/usr 用户的应用程序和文件几乎都存放在该目录下。<br>12、/lib 该目录用来存放系统动态链接共享库，几乎所有的应用程序都会用到该目录下的共享库。<br>13、/opt 第三方软件在安装时默认会找这个目录,所以你没有安装此类软件时它是空的,但如果你一旦把它删除了,以后在安装此类软件时就有可能碰到麻烦。<br>14、/tmp 用来存放不同程序执行时产生的临时文件，该目录会被系统自动清理干净。<br>15、/proc 可以在该目录下获取系统信息，这些信息是在内存中由系统自己产生的，该目录的内容不在硬盘上而在内存里。<br>16、/misc 可以让多用户堆积和临时转移自己的文件。<br>17、/lost＋found 该目录在大多数情况下都是空的。但当突然停电、或者非正常关机后，有些文件就临时存放在这里。<br>18、文件颜色的含义：蓝色为文件夹；绿色是可执行文件；浅蓝色是链接文件；红框文件是加了SUID位，任意限权；红色为压缩文件；褐色为设备文件。  </p><h2 id="一些有用的Linux目录"><a href="#一些有用的Linux目录" class="headerlink" title="一些有用的Linux目录"></a>一些有用的Linux目录</h2><p>1、bin： 包含常用的Linux用户命令，例如，ls、sort、date和chmod。<br>2、/boot： 包含可引导的Linux内核和引导装载（boot loader）配置文件（GRUB）。<br>3、/dev： 包含代表系统设备访问点的文件。这包括终端设备（tty*)、软盘（fd<em>）、硬盘（hd</em>）、RAM（ram<em>）和CD-ROM（cd</em>）（用户通常通过设备文件直接访问这些设备）。<br>4、/etc：包含管理配置文件。<br>5、/home： 包含分配给每个拥有登陆帐号用户的目录。<br>6、/media：提供挂载（mounting）和自动挂载设备的标准位置，如远程文件系统和可移动介质（目录名为cdrecorder、floppy等）。<br>7、/mnt： 在被标准的/media目录替代前，这是很多设备常用的挂载点。某些可引导的Linux系统仍旧使用该目录来挂载硬盘分区和远程文件系统。<br>8、/proc：包含有关系统资源的信息。<br>9、/root：表示根用户的主目录。<br>10、/sbin：包含管理命令和守护进程。<br>11、/sys：一个类似与/proc的文件系统，在Linux2.6内核中最新出现的，包含的文件用于获得硬件状态并反映内核看到的系统设备树。它使用了/proc中的很多帮助。<br>12、/tmp：包含应用程序使用的临时文件。<br>13、/usr：包含用户文档、游戏、图形文件（X11）、库（lib），以及各种其他用户和管理命令及文件<br>14、/var：包含不同应用程序使用的数据目录。特别要注意的是，这里放置作为FTP服务器（/var/ftp）成Web服务器（/var/www）共享文件。它还包含所有系统日志文件（/var/log）。<br>15、Linux文件系统与基于Windows的文件系统  </p><hr><p>尽管很多方面相似，但是Linux文件系统与MS-DOS和Windows操作系统所用的文件系统还是有一些显著的差别。下面列出了其中的一些差别：<br>      1   在MS-DOS和Windows文件系统中，驱动器盘符表示不同的存储设备（例如，A：是软驱，C：是硬盘）。在Linux中，所有的存储设备都被置于文 件系统层次结构中。因此所有/usr可能在单独的硬盘上，或者/mnt/reml是其他计算机上的文件系统，这对用户完全是隐藏的。<br>      2   斜线（不是反斜线）用于分隔Linux中的目录名。所以在MS系统中的C：\home\chris在Linux系统中是/home/chris。<br>      3   在DOS中文件名几乎总是有后缀（如用于文本文件的.txt或者用于字处理文件的.doc）。虽然有时可以在Linux中使用该约定，但是3字符的后缀在 Linux中已经没有所需的含义。识别文件类型时它们很有用。很多Linux应用程序和桌面环境都使用文件后缀来确定文件的内容。<br>      4   Linux文件系统中的所有文件和目录都有与之关联的许可和所有权。Microsoft各系统之间的安全性则有所不同。因为DOS和MS Windows开始是用于单用户的系统，所以设计这些系统时并没有在系统中内建文件所有权。后续的版本添加了一些功能（如文件和文件夹属性）来解决该问 题。  </p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 单线程、宏任务与微任务的执行顺序</title>
      <link href="2020/11/25/jsRunningOrder/"/>
      <url>2020/11/25/jsRunningOrder/</url>
      
        <content type="html"><![CDATA[<h2 id="js-单线程"><a href="#js-单线程" class="headerlink" title="js 单线程"></a>js 单线程</h2><blockquote><p>众所周知js是单线程，但js是可以执行同步和异步任务的，同步的任务众人皆知是按照顺序去执行的；<br>而异步任务的执行，是有一个优先级的顺序的，包括了 宏任务（macrotasks）和 微任务(microtasks)</p></blockquote><h2 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h2><blockquote><p>是指消息队列中的等待被主线程执行的事件，宏任务执行时都会重新创建栈，然后调用宏任务中的函数，栈也会随着变化，但宏任务执行结束时，栈也会随之销毁。<br>包括 整体代码script，setTimeout，setInterval ，setImmediate，I/O，UI renderingnew ，Promise*</p></blockquote><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><blockquote><p>可以把微任务看成是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前<br>包括 Promises.(then catch finally)，process.nextTick， MutationObserver<br>微任务是基于消息队列、事件循环、UI 主线程还有堆栈而来的</p></blockquote><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><blockquote><p>宏任务和微任务的区别在于在事件循环机制中，执行的机制不同<br>每次执行完所有的同步任务后，会在任务队列中取出异步任务，先将所有微任务执行完成后，才会执行宏任务<br>所以可以得出结论， 微任务会在宏任务之前执行。<br>我们在工作常用到的宏任务是 setTimeout，而微任务是 Promise.then<br>注意这里是Promise.then,也就是说 new   Promise在实例化的过程中所执行的代码是同步的，而在then中注册的回调函数才是异步。</p></blockquote><pre><code class="javascript">setTimeout(function()&#123;    console.log(&#39;1&#39;)&#125;);new Promise(function(resolve)&#123;    console.log(&#39;2&#39;);    resolve();&#125;).then(function()&#123;    console.log(&#39;3&#39;)&#125;);console.log(&#39;4&#39;);new Promise(function(resolve)&#123;    console.log(&#39;5&#39;);    resolve();&#125;).then(function()&#123;    console.log(&#39;6&#39;)&#125;);setTimeout(function()&#123;    console.log(&#39;7&#39;)&#125;);function bar()&#123;    console.log(&#39;8&#39;)    foo()&#125;function foo()&#123;    console.log(&#39;9&#39;)&#125;console.log(&#39;10&#39;)bar()</code></pre><h2 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h2><blockquote><p>首先浏览器执行Js代码由上至下顺序，遇到setTimeout，把setTimeout分发到宏任务Event Queue中<br>new Promise属于主线程任务直接执行打印2<br>Promis下的then方法属于微任务，把then分到微任务 Event Queue中<br>console.log(‘4’)属于主线程任务，直接执行打印4<br>又遇到new Promise也是直接执行打印5，Promise 下到then分发到微任务Event Queue中<br>又遇到setTimouse也是直接分发到宏任务Event Queue中，等待执行<br>console.log(‘10’)属于主线程任务直接执行<br>遇到bar()函数调用，执行构造函数内到代码，打印8，在bar函数中调用foo函数，执行foo函数到中代码，打印9<br>主线程中任务执行完后，就要执行分发到微任务Event Queue中代码，实行先进先出，所以依次打印3，6<br>微任务Event Queue中代码执行完，就执行宏任务Event Queue中代码，也是先进先出，依次打印1，7。<br>最终结果：2，4，5，10，8，9，3，6，1，7</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2019/07/14/hello-world/"/>
      <url>2019/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
