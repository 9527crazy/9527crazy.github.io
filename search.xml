<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js 单线程、宏任务与微任务的执行顺序</title>
      <link href="2020/11/25/jsRunningOrder/"/>
      <url>2020/11/25/jsRunningOrder/</url>
      
        <content type="html"><![CDATA[<h3 id="js-单线程"><a href="#js-单线程" class="headerlink" title="js 单线程"></a>js 单线程</h3><blockquote><p>众所周知js是单线程，但js是可以执行同步和异步任务的，同步的任务众人皆知是按照顺序去执行的；<br>而异步任务的执行，是有一个优先级的顺序的，包括了 宏任务（macrotasks）和 微任务(microtasks)</p></blockquote><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><blockquote><p>是指消息队列中的等待被主线程执行的事件，宏任务执行时都会重新创建栈，然后调用宏任务中的函数，栈也会随着变化，但宏任务执行结束时，栈也会随之销毁。<br>包括 整体代码script，setTimeout，setInterval ，setImmediate，I/O，UI renderingnew ，Promise*</p></blockquote><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><blockquote><p>可以把微任务看成是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前<br>包括 Promises.(then catch finally)，process.nextTick， MutationObserver<br>微任务是基于消息队列、事件循环、UI 主线程还有堆栈而来的</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><p>宏任务和微任务的区别在于在事件循环机制中，执行的机制不同<br>每次执行完所有的同步任务后，会在任务队列中取出异步任务，先将所有微任务执行完成后，才会执行宏任务<br>所以可以得出结论， 微任务会在宏任务之前执行。<br>我们在工作常用到的宏任务是 setTimeout，而微任务是 Promise.then<br>注意这里是Promise.then,也就是说 new   Promise在实例化的过程中所执行的代码是同步的，而在then中注册的回调函数才是异步。</p></blockquote><pre><code class="javascript">setTimeout(function()&#123;    console.log(&#39;1&#39;)&#125;);new Promise(function(resolve)&#123;    console.log(&#39;2&#39;);    resolve();&#125;).then(function()&#123;    console.log(&#39;3&#39;)&#125;);console.log(&#39;4&#39;);new Promise(function(resolve)&#123;    console.log(&#39;5&#39;);    resolve();&#125;).then(function()&#123;    console.log(&#39;6&#39;)&#125;);setTimeout(function()&#123;    console.log(&#39;7&#39;)&#125;);function bar()&#123;    console.log(&#39;8&#39;)    foo()&#125;function foo()&#123;    console.log(&#39;9&#39;)&#125;console.log(&#39;10&#39;)bar()</code></pre><h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><blockquote><p>首先浏览器执行Js代码由上至下顺序，遇到setTimeout，把setTimeout分发到宏任务Event Queue中<br>new Promise属于主线程任务直接执行打印2<br>Promis下的then方法属于微任务，把then分到微任务 Event Queue中<br>console.log(‘4’)属于主线程任务，直接执行打印4<br>又遇到new Promise也是直接执行打印5，Promise 下到then分发到微任务Event Queue中<br>又遇到setTimouse也是直接分发到宏任务Event Queue中，等待执行<br>console.log(‘10’)属于主线程任务直接执行<br>遇到bar()函数调用，执行构造函数内到代码，打印8，在bar函数中调用foo函数，执行foo函数到中代码，打印9<br>主线程中任务执行完后，就要执行分发到微任务Event Queue中代码，实行先进先出，所以依次打印3，6<br>微任务Event Queue中代码执行完，就执行宏任务Event Queue中代码，也是先进先出，依次打印1，7。<br>最终结果：2，4，5，10，8，9，3，6，1，7</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2019/07/14/hello-world/"/>
      <url>2019/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
